{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Litex SOC with Advanced Interrupt Architecture # Introduction # By integrating RISC-V Advanced Interrupt Architecture (AIA) support into the LiteX SoC framework, we aim to enhance LiteX with modern interrupt handling capabilities that support message-signaled interrupts (MSIs), virtualization, and improved scalability for multi-core systems. Background # The RISC-V Advanced Interrupt Architecture (AIA) represents the next generation of interrupt handling for RISC-V systems, offering significant advantages over traditional interrupt controllers: Message-Signaled Interrupts (MSIs) : Direct support for PCIe and other modern peripheral standards Virtualization Support : Hardware-assisted interrupt virtualization for guest VMs Scalability : Support for up to 16,384 harts with thousands of interrupt sources Flexible Priority Management : Software-configurable interrupt priorities across all interrupt types Improved Latency : Hardware acceleration for interrupt delivery and handling AIA vs CLIC Feature Comparison # Feature CLIC AIA Interrupt Sources Up to 4096 Up to 2047 per IMSIC Priority Levels 256 levels Configurable priorities Hardware Vectoring Selective Via IMSIC MSI Support No Native Virtualization Limited Full support Multi-core Scaling Limited Up to 16,384 harts Preemption Level-based Priority-based Software Complexity Lower Higher Hardware Complexity Lower Higher Industry Adoption Growing Standardized Implementation Complexity Analysis # CLIC Implementation # Advantages : Simpler hardware, lower latency for real-time Disadvantages : No MSI support, limited virtualization AIA Implementation # Advantages : Future-proof, comprehensive feature set Disadvantages : Higher complexity, more resources","title":"Litex SOC with Advanced Interrupt Architecture"},{"location":"#litex-soc-with-advanced-interrupt-architecture","text":"","title":"Litex SOC with Advanced Interrupt Architecture"},{"location":"#introduction","text":"By integrating RISC-V Advanced Interrupt Architecture (AIA) support into the LiteX SoC framework, we aim to enhance LiteX with modern interrupt handling capabilities that support message-signaled interrupts (MSIs), virtualization, and improved scalability for multi-core systems.","title":"Introduction"},{"location":"#background","text":"The RISC-V Advanced Interrupt Architecture (AIA) represents the next generation of interrupt handling for RISC-V systems, offering significant advantages over traditional interrupt controllers: Message-Signaled Interrupts (MSIs) : Direct support for PCIe and other modern peripheral standards Virtualization Support : Hardware-assisted interrupt virtualization for guest VMs Scalability : Support for up to 16,384 harts with thousands of interrupt sources Flexible Priority Management : Software-configurable interrupt priorities across all interrupt types Improved Latency : Hardware acceleration for interrupt delivery and handling","title":"Background"},{"location":"#aia-vs-clic-feature-comparison","text":"Feature CLIC AIA Interrupt Sources Up to 4096 Up to 2047 per IMSIC Priority Levels 256 levels Configurable priorities Hardware Vectoring Selective Via IMSIC MSI Support No Native Virtualization Limited Full support Multi-core Scaling Limited Up to 16,384 harts Preemption Level-based Priority-based Software Complexity Lower Higher Hardware Complexity Lower Higher Industry Adoption Growing Standardized","title":"AIA vs CLIC Feature Comparison"},{"location":"#implementation-complexity-analysis","text":"","title":"Implementation Complexity Analysis"},{"location":"#clic-implementation","text":"Advantages : Simpler hardware, lower latency for real-time Disadvantages : No MSI support, limited virtualization","title":"CLIC Implementation"},{"location":"#aia-implementation","text":"Advantages : Future-proof, comprehensive feature set Disadvantages : Higher complexity, more resources","title":"AIA Implementation"},{"location":"Architecture/","text":"AIA LiteX SoC Framework Architecture # Core Components Integration # We propose implementing the following AIA components in LiteX: IMSIC (Incoming MSI Controller) One IMSIC per VexRiscv core Support for machine and supervisor-level interrupt files Initial implementation without guest interrupt files APLIC (Advanced Platform-Level Interrupt Controller) Centralized interrupt routing for wired interrupts Support for both direct delivery and MSI forwarding modes Hierarchical domain support for M-mode and S-mode ACLINT Compatibility Maintain backward compatibility with existing timer and software interrupt mechanisms Implement as separate MTIMER and MSWI devices per AIA specification System Architecture # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 VexRiscv \u2502 \u2502 VexRiscv \u2502 \u2502 VexRiscv \u2502 \u2502 Core 0 \u2502 \u2502 Core 1 \u2502 \u2502 Core N \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502IMSIC\u2502 \u2502IMSIC\u2502 \u2502IMSIC\u2502 \u2502 0 \u2502 \u2502 1 \u2502 \u2502 N \u2502 \u2514\u2500\u2500\u252c\u2500\u2500\u2518 \u2514\u2500\u2500\u252c\u2500\u2500\u2518 \u2514\u2500\u2500\u252c\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 APLIC \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Peripheral Devices\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Software Architecture # Driver Stack Overview # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 User Applications \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Linux Kernel \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 IRQ Domain Subsystem \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 AIA Driver Framework \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 APLIC \u2502 IMSIC \u2502 \u2502 Driver \u2502 Driver \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Key Software Components # APLIC Driver Device initialization Interrupt routing configuration Domain management MSI address generation IMSIC Driver Interrupt file management CSR access abstraction Priority handling Vector table management Integration Layer IRQ domain mapping Device tree parsing Legacy compatibility Performance monitoring","title":"Architecture"},{"location":"Architecture/#aia-litex-soc-framework-architecture","text":"","title":"AIA LiteX SoC Framework Architecture"},{"location":"Architecture/#core-components-integration","text":"We propose implementing the following AIA components in LiteX: IMSIC (Incoming MSI Controller) One IMSIC per VexRiscv core Support for machine and supervisor-level interrupt files Initial implementation without guest interrupt files APLIC (Advanced Platform-Level Interrupt Controller) Centralized interrupt routing for wired interrupts Support for both direct delivery and MSI forwarding modes Hierarchical domain support for M-mode and S-mode ACLINT Compatibility Maintain backward compatibility with existing timer and software interrupt mechanisms Implement as separate MTIMER and MSWI devices per AIA specification","title":"Core Components Integration"},{"location":"Architecture/#system-architecture","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 VexRiscv \u2502 \u2502 VexRiscv \u2502 \u2502 VexRiscv \u2502 \u2502 Core 0 \u2502 \u2502 Core 1 \u2502 \u2502 Core N \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502IMSIC\u2502 \u2502IMSIC\u2502 \u2502IMSIC\u2502 \u2502 0 \u2502 \u2502 1 \u2502 \u2502 N \u2502 \u2514\u2500\u2500\u252c\u2500\u2500\u2518 \u2514\u2500\u2500\u252c\u2500\u2500\u2518 \u2514\u2500\u2500\u252c\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 APLIC \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Peripheral Devices\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"System Architecture"},{"location":"Architecture/#software-architecture","text":"","title":"Software Architecture"},{"location":"Architecture/#driver-stack-overview","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 User Applications \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Linux Kernel \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 IRQ Domain Subsystem \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 AIA Driver Framework \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 APLIC \u2502 IMSIC \u2502 \u2502 Driver \u2502 Driver \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Driver Stack Overview"},{"location":"Architecture/#key-software-components","text":"APLIC Driver Device initialization Interrupt routing configuration Domain management MSI address generation IMSIC Driver Interrupt file management CSR access abstraction Priority handling Vector table management Integration Layer IRQ domain mapping Device tree parsing Legacy compatibility Performance monitoring","title":"Key Software Components"},{"location":"Roadmap/","text":"Roadmap # Implementation Roadmap # Phase 1: Foundation # 1.1 Core Infrastructure # Define AIA memory map regions in LiteX Create base classes for AIA components Implement CSR extensions for VexRiscv (Smaia) Setup interrupt routing infrastructure 1.2 ACLINT Implementation # Implement MTIMER device Implement MSWI device Ensure backward compatibility with existing CLINT Create device tree bindings Phase 2: APLIC Development # 2.1 Basic APLIC # Implement APLIC register interface Support for up to 1023 interrupt sources Direct delivery mode implementation Basic interrupt routing logic 2.2 Advanced APLIC Features # MSI delivery mode support Hierarchical domain implementation Interrupt delegation between M/S modes Integration with system bus Phase 3: IMSIC Integration # 3.1 IMSIC Core # Implement interrupt file structure MSI reception and recording logic CSR interface (mtopei, stopei) Interrupt priority handling 3.2 IMSIC-APLIC Integration # MSI forwarding from APLIC to IMSIC Unified interrupt routing Performance optimization Multi-core synchronization Phase 4: Software Support # 4.1 Bare-metal Support # AIA initialization routines Interrupt handler templates Driver API for APLIC/IMSIC Example applications 4.2 Linux Support # Device tree bindings Linux interrupt controller drivers Integration with existing IRQ subsystem Performance benchmarking tools Phase 5: Verification & Testing # 5.1 Compliance Testing # RISC-V AIA specification compliance Interrupt latency measurements Priority handling verification Multi-core stress testing 5.2 System Integration # Full SoC integration testing Peripheral interrupt testing Software compatibility validation Documentation completion Benefits Over CLIC # While CLIC offers excellent real-time capabilities, AIA provides: Better Scalability : Designed for systems with thousands of cores MSI Support : Native support for modern peripheral standards Virtualization : Hardware support for interrupt virtualization Industry Alignment : Broader ecosystem support and standardization Flexibility : Modular design allows partial implementation Conclusion # Implementing AIA support in LiteX positions the framework at the forefront of RISC-V interrupt architecture evolution. This enhancement will enable LiteX-based SoCs to support modern peripherals, virtualization, and scale to larger multi-core systems while maintaining the framework's ease of use and flexibility. The modular approach allows for incremental implementation, reducing risk while delivering value at each phase. With proper execution, LiteX will become the go-to platform for exploring and deploying advanced RISC-V interrupt architectures.","title":"Roadmap"},{"location":"Roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"Roadmap/#implementation-roadmap","text":"","title":"Implementation Roadmap"},{"location":"Roadmap/#phase-1-foundation","text":"","title":"Phase 1: Foundation"},{"location":"Roadmap/#11-core-infrastructure","text":"Define AIA memory map regions in LiteX Create base classes for AIA components Implement CSR extensions for VexRiscv (Smaia) Setup interrupt routing infrastructure","title":"1.1 Core Infrastructure"},{"location":"Roadmap/#12-aclint-implementation","text":"Implement MTIMER device Implement MSWI device Ensure backward compatibility with existing CLINT Create device tree bindings","title":"1.2 ACLINT Implementation"},{"location":"Roadmap/#phase-2-aplic-development","text":"","title":"Phase 2: APLIC Development"},{"location":"Roadmap/#21-basic-aplic","text":"Implement APLIC register interface Support for up to 1023 interrupt sources Direct delivery mode implementation Basic interrupt routing logic","title":"2.1 Basic APLIC"},{"location":"Roadmap/#22-advanced-aplic-features","text":"MSI delivery mode support Hierarchical domain implementation Interrupt delegation between M/S modes Integration with system bus","title":"2.2 Advanced APLIC Features"},{"location":"Roadmap/#phase-3-imsic-integration","text":"","title":"Phase 3: IMSIC Integration"},{"location":"Roadmap/#31-imsic-core","text":"Implement interrupt file structure MSI reception and recording logic CSR interface (mtopei, stopei) Interrupt priority handling","title":"3.1 IMSIC Core"},{"location":"Roadmap/#32-imsic-aplic-integration","text":"MSI forwarding from APLIC to IMSIC Unified interrupt routing Performance optimization Multi-core synchronization","title":"3.2 IMSIC-APLIC Integration"},{"location":"Roadmap/#phase-4-software-support","text":"","title":"Phase 4: Software Support"},{"location":"Roadmap/#41-bare-metal-support","text":"AIA initialization routines Interrupt handler templates Driver API for APLIC/IMSIC Example applications","title":"4.1 Bare-metal Support"},{"location":"Roadmap/#42-linux-support","text":"Device tree bindings Linux interrupt controller drivers Integration with existing IRQ subsystem Performance benchmarking tools","title":"4.2 Linux Support"},{"location":"Roadmap/#phase-5-verification--testing","text":"","title":"Phase 5: Verification &amp; Testing"},{"location":"Roadmap/#51-compliance-testing","text":"RISC-V AIA specification compliance Interrupt latency measurements Priority handling verification Multi-core stress testing","title":"5.1 Compliance Testing"},{"location":"Roadmap/#52-system-integration","text":"Full SoC integration testing Peripheral interrupt testing Software compatibility validation Documentation completion","title":"5.2 System Integration"},{"location":"Roadmap/#benefits-over-clic","text":"While CLIC offers excellent real-time capabilities, AIA provides: Better Scalability : Designed for systems with thousands of cores MSI Support : Native support for modern peripheral standards Virtualization : Hardware support for interrupt virtualization Industry Alignment : Broader ecosystem support and standardization Flexibility : Modular design allows partial implementation","title":"Benefits Over CLIC"},{"location":"Roadmap/#conclusion","text":"Implementing AIA support in LiteX positions the framework at the forefront of RISC-V interrupt architecture evolution. This enhancement will enable LiteX-based SoCs to support modern peripherals, virtualization, and scale to larger multi-core systems while maintaining the framework's ease of use and flexibility. The modular approach allows for incremental implementation, reducing risk while delivering value at each phase. With proper execution, LiteX will become the go-to platform for exploring and deploying advanced RISC-V interrupt architectures.","title":"Conclusion"}]}